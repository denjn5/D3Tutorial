    var partition = d3.partition()
        .size([2 * Math.PI, radius]);
    /*
    LATER: 1/2 circle, 1/4 circle, 75% of the radius
    */


    .append("title") creates a <title> element within each <path></path> element.

    .text(function (d) { return d.data.name; }) adds the name of the node to the <title> element, such as
    <title>Topic A</title>

    http://jsfiddle.net/Hm49x/


    // TODO: Make it respond to clicks. Show labels in a diff box on the page.
    // TODO: Set colors based on source or sentiment
    // TODO: Only show top X values in sunburst


<style>
#main {
  float: left;
  width: 750px;
}

#sidebar {
  float: right;
  width: 100px;
}
</style>
<body>
    <div id="main">
        <svg></svg>
    </div>
    <div id="sidebar">
        <label><input class="sizeSelect" type="radio" name="mode" value="size" id="radioSize" checked> Size</label>
        <label><input class="sizeSelect"  type="radio" name="mode" value="count" id="radioCount"> Count</label>
    </div>
</body>

In our html body we've added several lines to get user input and display it properly (Tutorial 2 body contained only the <svg> tag).
1) <div id="main">...</div> creates our main section. It contains our original <svg> element.
2) <div id="main">...</div> creates our sidebar section.  We'll interact with the user here.
3) <input class="sizeSelect" type="radio" name="mode" value="size" id="radioSize" checked> is our actual radio button element.
    * class="sizeSelect" so that we can get a hold of it with d3.
    * type="radio" tells html that this is a radio button.
    * name="mode" tells html that all radio buttons with this name act as a unit, so if one is chosen, the others are un-chosen.
    * value="size" is what gets returned when we test to see which radio button is selected.
    * id="radioSize"


d3.hierarchy(nodeData, function children(d) { return d.children; })



        // Redraw the Sunburst Based on User Input
        slice.on("click", function(d,i) {
            var sequenceArray = d.ancestors().reverse();
            sequenceArray.shift(); // remove root node from the array

            slice.style("opacity", 0.4);
            slice.filter(function(d) {
                if (sequenceArray.indexOf(d) === sequenceArray.length - 1) {
                    if (d.lastClicked) {
                        d.lastClicked = false;
                        slice.style("opacity", 1);

                    } else {
                        d.lastClicked = true;
                    }

                    //d3.select("#sidebar").data(d)
                    //    .enter().append("hellow");
                } else {
                    d.lastClicked = false;

                }


            return (sequenceArray.indexOf(d) >= 0); })
                .style("opacity", 1);

            //d3.select("#sidebar").text("another!");


            // TODO: Write text to #sidebar
            // TODO: Make the labels "non selectable"
        });